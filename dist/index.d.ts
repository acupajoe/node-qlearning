// Generated by dts-bundle v0.7.3

declare module 'qlearning' {
    import State from "qlearning/state";
    import { Policy } from "qlearning/policy";
    class QLearning {
            name: string;
            state?: State;
            actions: Array<object>;
            alpha: number;
            policy?: Policy;
            history: Array<State>;
            theta: Policy;
            functions: {
                    cost?: (state: object, action: object) => number;
                    reward?: (state: object) => number;
                    printer?: (state: object) => void;
                    stateGenerator?: (state: object, action: object) => object;
            };
            constructor(name: string, actions: Array<object>, alpha: number);
            /**
                * Needs to be called after state functions are set, binds the context wherein
                * those functions are called.
                *
                * @param {Object} context
                * @returns {this}
                */
            bind(context: object): this;
            verbose: boolean;
            /**
                * Sets the current state of the agent
                *
                * @param {Object} state
                * @returns {this}
                */
            setState(state: object): this;
            /**
                * [REQUIRED]
                * Sets the function for evaluating the cost of the current state
                *
                * @param {(state: object, action: Object) => number} func
                * @returns {this}
                */
            setCost(func: (state: object, action: object) => number): this;
            /**
                * [REQUIRED]
                * Sets the function for evaluating the reward of an arbitrary state
                *
                * @param {(state: object) => number} func
                * @returns {this}
                */
            setReward(func: (state: object) => number): this;
            /**
                * [OPTIONAL]
                * Printing function that is called after each step
                *
                * @param {(state: object) => void} func
                * @returns {this}
                */
            setPrinter(func: (state: object) => void): this;
            /**
                * [REQUIRED]
                * Sets the function for generating a new state given the current state and performing
                * an action
                *
                * @param {(state: State, action: Object) => Object} func
                * @returns {this}
                */
            setStateGenerator(func: (state: object, action: object) => object): this;
            /**
                * [Required]
                * Begins the QLearning Process
                * Must be called after state functions are set.
                *
                * @param {Object} initialState
                * @returns {this}
                */
            start(initialState: object): this;
            /**
                * Learns from the most recent step -> produces new state
                * Should be called after `step()` and a subsequent call to
                * `setState(state)` or `perceiveState()`
                *
                * @returns {this}
                */
            learn(): this;
            /**
                * Choose the next `best` action (GREEDY)
                * @returns {this}
                */
            step(): this;
            /**
                *
                * @param {string} path
                */
            save(path: string): this;
            /**
                *
                * @param {string} path
                * @param {string} name
                * @returns {QLearning}
                */
            saveAs(path: string, name: string): this;
            /**
                *
                * @param {string} path
                * @returns {this}
                */
            load(path: string): this;
            /**
                * Have the agent perceive its current state (to be called before and after a step)
                * @returns {this}
                */
            perceiveState(): this;
    }
    export default QLearning;
}

declare module 'qlearning/state' {
    export default class State {
        obj?: object;
        action?: object;
        reward?: number;
        constructor(obj?: object, action?: object, reward?: number);
        readonly hash: string;
    }
}

declare module 'qlearning/policy' {
    export interface IPolicy {
        action?: object;
        reward?: number;
    }
    export interface Policy {
        [name: string]: Array<IPolicy>;
    }
}

